const { MessageAttachment } = require( 'discord.js' );
const { createCanvas, loadImage, registerFont } = require( 'canvas' );

registerFont( 'src/assets/fonts/Oswald-Regular.ttf', { family: 'Oswald' } );
registerFont( 'src/assets/fonts/Oswald-Light.ttf', { family: 'Oswald Light' } );
registerFont( 'src/assets/fonts/Oswald-ExtraLight.ttf', { family: 'Oswald ExtraLight' } ); // currently not working with node-canvas

const GREY = '#808080';
const YELLOW = '#FEEE46';
const HARD_COUNTER_COLOR = '#e44747';
const SOFT_COUNTER_COLOR = '#9B47E4';

module.exports = async ( battleType, seasonRangeType, seasonNums, opponentSquad, counterSquad, response ) => {
  const rowNum = response.length < 10 ? response.length : 10;
  const squadSize = parseInt( battleType.charAt( 0 ), 10 );
  const canvasHeight = rowNum > 1 ? 210 + (( rowNum - 1 ) * 65 ) : 210;
  const canvasWidth = squadSize === 5 ? 700 : 500;
  
  const canvas = createCanvas( canvasWidth, canvasHeight );
  const ctx = canvas.getContext( '2d' );

  async function buildBackground() {
    ctx.save();
    ctx.fillStyle = 'black';
    ctx.fillRect( 0, 0, canvasWidth, canvasHeight );
    ctx.restore();

    ctx.save();
    ctx.globalAlpha = .50;
    const background = await loadImage( 'src/assets/swgoh-background.png' );
    ctx.drawImage( background, 0, 0 );
    ctx.restore();
  }

  function buildTitleText( x, y, message ) {
    ctx.save();
    ctx.font = '30px "Oswald"';
    ctx.fillStyle = YELLOW;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText( message, x, y );
    ctx.restore();
  }

  function buildMetricTitles( x, y, message ) {
    ctx.save();
    ctx.translate( x, y );
    ctx.font = '18px "Oswald Light"';
    ctx.fillStyle = 'white';
    ctx.rotate( -Math.PI/4 );
    ctx.fillText( message, 0, 0 );
    ctx.restore();
  }
  
  async function buildCircle( x, y, squad, index, color ) {
    ctx.save();
    ctx.beginPath();
    ctx.arc( x, y, 25, 0, 2 * Math.PI );
    ctx.lineWidth = 1;
    ctx.shadowColor = 'white';
    ctx.shadowBlur = 10;
    ctx.strokeStyle = color === 'transparent' ? GREY : color;
    ctx.stroke();
    ctx.clip();

    const toon = await loadImage( `src/assets/characterImages/${ squad[ index ].id }.png` );
    ctx.drawImage( toon, x - 25, y - 25, 50, 50 );
    
    ctx.restore();
  }

  async function buildOpponentSquad( squad ) {
    let starting_x = 195;
    for ( let i = 0; i < squadSize; i+=1 ) {
      await buildCircle( starting_x, 75, squad, i, GREY );
      starting_x += 50;
    }
  }

  async function buildCounterSquad( squad ) {
    let starting_x = squadSize === 5 ? 465 : 365;
    for ( let i = 0; i < squadSize; i+=1 ) {
      await buildCircle( starting_x, 75, squad, i, GREY );
      starting_x += 50;
    }
  }

  function buildStats( stats, y ) {
    ctx.save();
    ctx.font = '15px "Oswald Light"';
    ctx.fillStyle = 'white';
    ctx.textBaseline = 'middle';
    ctx.textAlign = 'center';
    ctx.fillText( stats.totalSeen.toLocaleString(), 35, y );
    ctx.fillText( `${ Math.round( stats.avgWin * 100 ) }%`, 85, y );
    ctx.fillText( stats.avgBanners, 125, y );
    ctx.restore();
  }

  function buildRowBackground( starting_y, rowColor ) {
    ctx.save();
    ctx.fillStyle = rowColor === 'transparent' ? rowColor : `${ rowColor }40`;
    ctx.fillRect( 0, starting_y - 35, canvasWidth, 65 );
    ctx.restore();
  }

  function selectRowColor( avgWin ) {
    if ( avgWin >= .90 ) {return HARD_COUNTER_COLOR;}
    if ( avgWin >= .75 && avgWin < .90 ) {return SOFT_COUNTER_COLOR;}
    if ( avgWin < .75 ) {return 'transparent';}
  }

  async function buildRows( counters ) {
    let starting_y = 150;

    for ( let i = 0; i < rowNum; i+=1 ) {
      let opponentStarting_x = 195;
      let counterStarting_x = squadSize === 5 ? 465 : 365;
      const rowColor = selectRowColor( counters[ i ].avgWin );
      buildRowBackground( starting_y, rowColor );
    
      for ( let j = 0; j < squadSize; j+=1 ) {
        buildStats( counters[ i ], starting_y );
        await buildCircle( opponentStarting_x, starting_y, counters[ i ].opponentSquad, j, GREY );
        await buildCircle( counterStarting_x, starting_y, counters[ i ].counterSquad, j, rowColor );
        opponentStarting_x += 50;
        counterStarting_x += 50;
      }
    
      starting_y += 65;
    }
  }

  function buildSubText() {
    const date = new Date();
    ctx.save();
    ctx.font = '14px "Oswald"';
    ctx.fillStyle = '#FEEE46';
    ctx.textAlign = 'right';
    ctx.fillText( `generated by swgohcounters.com on ${ date.toLocaleDateString() }`, canvasWidth - 10, canvasHeight - 10 );
    ctx.restore();
  }

  function buildSeasonText() {
    let text;
    if ( !seasonRangeType || seasonRangeType === 'three' ) { text = `data from last three GAC seasons (${ seasonNums[ 0 ] }-${ seasonNums[ 1 ] })`;}
    if ( seasonRangeType === 'all' ) { text = `data from all GAC seasons (${ seasonNums[ 0 ] }-${ seasonNums[ 1 ] })`;}
    if ( seasonRangeType === 'last' ) { text = `data from last GAC season (${ seasonNums[ 0 ] })`;}
    ctx.save();
    ctx.font = '14px "Oswald"';
    ctx.fillStyle = "white";
    ctx.fillText( text, 10, canvasHeight - 10 );
    ctx.restore();
  }

  await buildBackground();
  buildTitleText(( squadSize === 5 ? 295 : 245 ), 25, 'Opponent' );
  buildTitleText(( squadSize === 5 ? 565 : 415 ), 25, 'Counter' );
  buildMetricTitles( 20, 100, 'Battles' );
  buildMetricTitles( 67.5, 100, 'Avg Win %' );
  buildMetricTitles( 115, 100, 'Avg Banners' );
  await buildOpponentSquad( opponentSquad );
  await buildCounterSquad( counterSquad );
  await buildRows( response );
  buildSubText();
  buildSeasonText();

  return new MessageAttachment( canvas.toBuffer(), 'counter.png' );
};